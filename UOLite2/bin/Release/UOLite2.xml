<?xml version="1.0"?>
<doc>
<assembly>
<name>
UOLite2
</name>
</assembly>
<members>
<member name="P:UOLite2.LiteClient.Targeting">
	<summary>
 Whether or not the server is requesting a target from the client, setting it to false will tell the server that you cancelled your target.
 </summary>
</member><member name="P:UOLite2.LiteClient.LastTarget">
	<summary>
 Gets or Sets the LastTarget.
 </summary>
</member><member name="P:UOLite2.LiteClient.TargetType">
	<summary>
 The type of target requested, either Ground or Object.
 </summary>
</member><member name="P:UOLite2.LiteClient.TargetFlag">
	<summary>
 The result of your target action on your target. Such as the target will be harmed or healed.
 </summary>
</member><member name="M:UOLite2.LiteClient.Target(UOLite2.Serial)">
	<summary>
 Responds to a target request from the server.
 </summary>
	<param name="Serial">The serial of the object to be targeted.</param>
</member><member name="M:UOLite2.LiteClient.Target(System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
	<summary>
 Responds to a target request from the server.
 </summary>
	<param name="X">The X position to target.</param>
	<param name="Y">The Y position to target.</param>
	<param name="Z">The Z position to target.</param>
	<param name="Graphic">The graphic of the tile, if the tile is a static tile, its 0 if it is a ground/map tile.</param>
</member><member name="M:UOLite2.Item.Target">
	<summary>
 Target's the object, if the server has requested a target.
 </summary>
</member><member name="E:UOLite2.LiteClient.onLoginConfirm">
	<summary>
 Called when the client recieves a login confirm packets from the game server, and the player character is created.
 </summary>
	<remarks></remarks>
</member><member name="E:UOLite2.LiteClient.onError">
	<summary> Called when an error occures within UOLite. It is important that you have something here to handle this.</summary>
	<param name="Description">The description of the error and possibly extra details.</param>
</member><member name="E:UOLite2.LiteClient.onLoginComplete">
	<summary>Called when the clientis completely logged in, after all the items and everything loads completely.</summary>
</member><member name="E:UOLite2.LiteClient.onPacketSend">
	<summary>
 Called when a Packet is sent formt he client to the server.
 </summary>
	<param name="Client">Client from which the packet was sent.</param>
	<param name="bytes">The sent packet.</param>
</member><member name="E:UOLite2.LiteClient.onConnectionLoss">
	<summary>
 Called when the client loses its network connection to the server.
 </summary>
	<param name="Client">The client that lost its connection.</param>
</member><member name="E:UOLite2.LiteClient.onNewMobile">
	<summary>
 Called when a mobile is created and added to the mobile list.
 </summary>
	<param name="Client">The client to which this applies.</param>
	<param name="Mobile">The new mobile.</param>
</member><member name="E:UOLite2.LiteClient.onNewItem">
	<summary>
 Called after a new item is created and added to the item list.
 </summary>
	<param name="Client">The client to which this applies.</param>
	<param name="Item">The new item.</param>
</member><member name="E:UOLite2.LiteClient.onCliLocSpeech">
	<summary>
 Called when the server sends the client a CliLoc speech packet. This is after the client processes the packet.
 </summary>
	<param name="Client">The client to which this applies.</param>
	<param name="Serial">The serial of the mobile/item speaking. 0xFFFFFFFF for System</param>
	<param name="BodyType">The bodytype/artwork of the mobile/item speaking. 0xFFFF for System</param>
	<param name="SpeechType">The type of speech.</param>
	<param name="Hue">The hue of the message.</param>
	<param name="Font">The font of the message.</param>
	<param name="CliLocNumber">The cliloc number.</param>
	<param name="Name">The name of the speaker. "SYSTEM" for System.</param>
	<param name="ArgsString">The arguements string, for formatting the speech. Each arguement is seperated by a "\t".</param>
</member><member name="E:UOLite2.LiteClient.onSpeech">
	<summary>Called when the client recieves a "text" or "Unicode Text" packet from the server.</summary>
	<param name="Client">The client to which this applies.</param>
	<param name="Serial">The serial of the mobile/item speaking. 0xFFFFFFFF for System</param>
	<param name="BodyType">The bodytype/artwork of the mobile/item speaking. 0xFFFF for System</param>
	<param name="SpeechType">The type of speech.</param>
	<param name="Hue">The hue of the message.</param>
	<param name="Font">The font of the message.</param>
	<param name="Text">The text to be displayed.</param>
	<param name="Name">The name of the speaker. "SYSTEM" for System.</param>
</member><member name="E:UOLite2.LiteClient.onCharacterListReceive">
	<summary>Called when the server sends the list of characters.</summary>
	<param name="Client">The client making the call</param>
	<param name="CharacterList">The list of characters as <see cref="T:UOLite2.Structures.CharListEntry">CharacterListEntry</see>'s.</param>
</member><member name="P:UOLite2.LiteClient.Password">
	<summary>The password used to connect to the server.</summary>
</member><member name="P:UOLite2.LiteClient.Username">
	<summary>The username used to connect to the server.</summary>
</member><member name="P:UOLite2.LiteClient.LoginServerAddress">
	<summary>Returns the ip address that is used when connecting to the login server to get the game server list.</summary>
</member><member name="P:UOLite2.LiteClient.LoginPort">
	<summary>Returns the port that is used when connecting to the login server to get the game server list.</summary>
</member><member name="P:UOLite2.LiteClient.GameServerAddress">
	<summary>Returns the ip address of the game server that you are connected to.</summary>
</member><member name="P:UOLite2.LiteClient.AccountUID">
	<summary>
 The account ID given to the client by the server at login.
 </summary>
</member><member name="P:UOLite2.LiteClient.Player">
	<summary>
 The player.
 </summary>
</member><member name="P:UOLite2.LiteClient.Mobiles">
	<summary>
 A list of the mobiles currently on the screen.
 </summary>
</member><member name="E:UOLite2.LiteClient.onRecievedServerList">
	<summary>
 Called when the client receives the server list durring the login process.
 </summary>
</member><member name="E:UOLite2.LiteClient.onLoginDenied">
	<summary>Called during the login process when the server rejects the username and password.</summary>
	<param name="Reason">The reason for the failure.</param>
</member><member name="M:UOLite2.LiteClient.#ctor(System.String,System.Boolean)">
	<summary>Creates a new client.</summary>
	<param name="EnableOSIEncryption">Whether or not to use OSI encryption, for OSI servers.</param>
	<param name="ContentFolderPath">The path to the directory containing cliloc.enu without the "\" at the end.</param>
</member><member name="M:UOLite2.LiteClient.Speak(System.String@,UOLite2.Enums.Common.Hues@,UOLite2.Enums.SpeechTypes@,UOLite2.Enums.Fonts@)">
	<summary>Causes the player to speak the specified text.</summary>
	<param name="Text">The text to speak.</param>
	<param name="Hue">The Hue of the text.</param>
	<param name="Type">The type, (ie. Yell, Whisper, etc.)</param>
	<param name="Font">The font.</param>
</member><member name="F:UOLite2.SupportClasses.GameServerInfo._Address">
	<summary>The IP address of the server.</summary>
</member><member name="F:UOLite2.SupportClasses.GameServerInfo._Name">
	<summary>The name of the server, as provided by the login server.</summary>
</member><member name="P:UOLite2.SupportClasses.GameServerInfo.Latency">
	<summary>The latency from the client to the server and back in milliseconds (ms). This is retrieved by sending a ping to the server when this property is called.</summary>
</member><member name="T:UOLite2.SupportClasses.GameServerInfo">
 Hide this class from the user, there is no reason from him/her to see it.
 <summary>Simply a class to hold information about game servers when recieved from the login server.</summary>
</member><member name="M:UOLite2.LiteClient.GenerateLoginKeys">
	<summary>Generates two keys for client side encryption.</summary>
</member><member name="E:UOLite2.Mobile.onDeath">
	<summary>
 Called when the hitpoint value of a mobile reaches zero (0).
 </summary>
	<param name="Client">The <see cref="T:UOLite2.LiteClient"/> that called this.</param>
	<param name="Mobile">The <see cref="T:UOLite2.Mobile"/> that has died.</param>
</member><member name="E:UOLite2.Mobile.onUpdate">
	<summary>
 This is called immediately before the client handles an update to a mobile.
 </summary>
	<param name="Client">The <see cref="T:UOLite2.LiteClient"/> that the mobile update was handled by.</param>
	<param name="Mobile">The <see cref="T:UOLite2.Mobile"/> that was updated.</param>
</member><member name="E:UOLite2.Mobile.onEquipmentUpdate">
	<summary>
 This is called immediately after a packet is recieved to equip an item.
 </summary>
	<param name="Client">The <see cref="T:UOLite2.LiteClient"/> that the mobile update was handled by.</param>
	<param name="Mobile">The <see cref="T:UOLite2.Mobile"/> that was updated.</param>
	<param name="EquipmentLayers">The <see cref="T:UOLite2.Enums.Layers">layers</see> that were changed.</param>
</member><member name="E:UOLite2.Mobile.onMove">
	<summary>Fired when this mobile moves.</summary>
</member><member name="P:UOLite2.Mobile.Layers">
	<summary>
 Returns the item on the specified layer.
 </summary>
</member><member name="P:UOLite2.Mobile.PoisonLevel">
	<summary>
 The level of poison that the mobile is aflicted with, 0 = no poison.
 </summary>
</member><member name="P:UOLite2.Mobile.Serial">
	<summary>
 The character's serial.
 </summary>
</member><member name="P:UOLite2.Mobile.Name">
	<summary>
 The character's name.
 </summary>
</member><member name="P:UOLite2.Mobile.Hits">
	<summary>
 The character's current amount of hit points.
 </summary>
</member><member name="P:UOLite2.Mobile.HitsMax">
	<summary>
 The character's maximum amount of hit points.
 </summary>
</member><member name="P:UOLite2.Mobile.Renamable">
	<summary>
 Specifies whether or not the player can rename this mobile. Generaly only the player's pets are renamable.
 This is a good way to tell if a mobile is a follower of the player. Although, It will be false for NPC followers like escorts.
 </summary>
</member><member name="P:UOLite2.Mobile.DisplayMode">
	<summary>
 Specifies what of information is displayed by the client.
 </summary>
</member><member name="P:UOLite2.Mobile.Gender">
	<summary>
 The gender of the mobile.
 </summary>
</member><member name="P:UOLite2.Mobile.Strength">
	<summary>
 The character's Strength.
 </summary>
</member><member name="P:UOLite2.Mobile.Dexterity">
	<summary>
 The character's Dexterity.
 </summary>
</member><member name="P:UOLite2.Mobile.Intelligence">
	<summary>
 The character's Intelligence.
 </summary>
</member><member name="P:UOLite2.Mobile.Stamina">
	<summary>
 The character's current Stamina.
 </summary>
</member><member name="P:UOLite2.Mobile.StaminaMax">
	<summary>
 The character's maximum Stamina.
 </summary>
</member><member name="P:UOLite2.Mobile.Mana">
	<summary>
 The character's current Mana.
 </summary>
</member><member name="P:UOLite2.Mobile.ManaMax">
	<summary>
 The character's maximum Mana.
 </summary>
</member><member name="P:UOLite2.Mobile.Gold">
	<summary>
 How much gold the character is currently carrying.
 </summary>
</member><member name="P:UOLite2.Mobile.ResistPhysical">
	<summary>
 The character's physical resistance value (old clients: AC).
 </summary>
</member><member name="P:UOLite2.Mobile.Weight">
	<summary>
 The character's current weight value.
 </summary>
</member><member name="P:UOLite2.Mobile.StatCap">
	<summary>
 The character's total allowable sum of Strength, Intelligence, and Dexterity.
 </summary>
</member><member name="P:UOLite2.Mobile.Followers">
	<summary>
 The number of "Follower Slots" that are currently being used.
 </summary>
</member><member name="P:UOLite2.Mobile.FollowersMax">
	<summary>
 The maximum number of "Follower Slots" the character has available.
 </summary>
</member><member name="P:UOLite2.Mobile.ResistFire">
	<summary>
 The character's resistance to fire.
 </summary>
</member><member name="P:UOLite2.Mobile.ResistCold">
	<summary>
 The character's resistance to cold.
 </summary>
</member><member name="P:UOLite2.Mobile.ResistPoison">
	<summary>
 The character's resistance to poison.
 </summary>
</member><member name="P:UOLite2.Mobile.ResistEnergy">
	<summary>
 The character's resistance to energy.
 </summary>
</member><member name="P:UOLite2.Mobile.Luck">
	<summary>
 The character's Luck value.
 </summary>
</member><member name="P:UOLite2.Mobile.DamangeMin">
	<summary>
 The minimum amount of damage the character can deal.
 </summary>
</member><member name="P:UOLite2.Mobile.DamageMax">
	<summary>
 The maximum amount of damage the character can deal.
 </summary>
</member><member name="P:UOLite2.Mobile.TithingPoints">
	<summary>
 The character's current amount of Tithing points.
 </summary>
</member><member name="M:UOLite2.Mobile.HandleUpdatePacket(UOLite2.Packets.MobileStats)">
	<summary>
 Updates the class given a mobile related packet.
 </summary>
</member><member name="T:UOLite2.Enums.Renamable">
	<summary>
 Whether or not a mobile can be renamed by the player.
 </summary>
</member><member name="T:UOLite2.Enums.DisplayMode">
	<summary>
 What data is displayed about the mobile.
 </summary>
</member><member name="M:UOLite2.LiteClient.MobileList.AddMobile(UOLite2.Mobile)">
	<summary>
 Adds the specified mobile to the mobile list.
 </summary>
</member><member name="M:UOLite2.LiteClient.MobileList.AddMobile(UOLite2.Packets.EquippedMobile)">
	<summary>
 Adds the a new mobile to the <see cref="T:UOLite2.LiteClient.MobileList"/> based on a supplied packet.
 </summary>
	<param name="Packet">The packet as a <see cref="T:UOLite2.Packets.EquippedMobile"/>.</param>
</member><member name="M:UOLite2.LiteClient.MobileList.AddMobile(UOLite2.Packets.NakedMobile)">
	<param name="Packet">The packet as a <see cref="T:UOLite2.Packets.NakedMobile"/>.</param>
</member><member name="M:UOLite2.LiteClient.MobileList.RemoveMobile(UOLite2.Serial)">
	<summary>
 Removes the specified mobile from the MobileList.
 </summary>
	<param name="Serial">The serial of the mobile to be removed.</param>
</member><member name="M:UOLite2.LiteClient.MobileList.Exists(UOLite2.Serial)">
	<summary>
 Checks to see if the specified mobile exists in the MobileList.
 </summary>
	<param name="Serial">The serial of the mobile to check for.</param>
</member><member name="M:UOLite2.LiteClient.MobileList.byName(System.String)">
	<summary>
 Returns a MobileList containing all of the mobiles with the specified name.
 </summary>
	<param name="Name">The name you want to search for.</param>
</member><member name="P:UOLite2.LiteClient.MobileList.Mobile(UOLite2.Serial)">
	<summary>
 Returns mobile specified by serial.
 </summary>
	<param name="Serial">The serial of the mobile.</param>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:UOLite2.SupportClasses.CircularBuffer`1.ReadSingle">
	<summary>Returns the object at the tail of the buffer and advances the read position by 1.</summary>
</member><member name="M:UOLite2.SupportClasses.CircularBuffer`1.Read(System.UInt32@)">
	<summary>Returns an array containing the number of objects requested, and advances the tail of the buffer.</summary>
	<param name="Number">Number of objects to get from the tail of the buffer.</param>
</member><member name="M:UOLite2.SupportClasses.CircularBuffer`1.AdvanceTail(System.UInt32@)">
	<summary>Advances the tail of the buffer, returns nothing, effectively skipping the specified number of objects.</summary>
	<param name="NumberToSkip">The amount by which to advance.</param>
</member><member name="M:UOLite2.SupportClasses.CircularBuffer`1.WriteSingle(`0@)">
	<summary>
 Writes a single object to the buffer, then advances the head position by 1.
 </summary>
	<param name="ObjectToWrite">The object to insert into the buffer.</param>
	<remarks></remarks>
</member><member name="M:UOLite2.SupportClasses.CircularBuffer`1.Write(`0[]@)">
	<summary>
 Writes the array of objects to the buffer and advances the head position by that number of objects.
 </summary>
	<param name="ObjectsToWrite">An array of the objects to write to the buffer.</param>
	<remarks></remarks>
</member><member name="M:UOLite2.SupportClasses.CircularBuffer`1.Clear">
	<summary>
 Empties the buffer.
 </summary>
</member><member name="M:UOLite2.SupportClasses.CircularBuffer`1.PeekMultiple(System.UInt32@,System.UInt32@)">
	<summary>
 Returns the specified number of objects as the desired position, but does NOT advance the tail position.
 </summary>
	<param name="Size">The number of objects to retreive</param>
	<param name="Offset">The position to start reading from.</param>
</member><member name="M:UOLite2.SupportClasses.CircularBuffer`1.Peek(System.UInt32@)">
	<summary>
 Returns the object as the given postion, but does NOT advance the tail position.
 </summary>
	<param name="Offset"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:UOLite2.SupportClasses.CircularBuffer`1.Size">
	<summary>
 The total number of objects current held in the buffer. (not the actual buffer size)
 </summary>
</member><member name="P:UOLite2.SupportClasses.CircularBuffer`1.RealSize">
	<summary>
 Return the true size of the circular buffer, not just how much it actualy contains.
 </summary>
</member><member name="P:UOLite2.SupportClasses.CircularBuffer`1.TailPosition">
	<summary>
 The offset of the tail from the true beginning of the buffer.
 </summary>
</member><member name="P:UOLite2.SupportClasses.CircularBuffer`1.HeadPosition">
	<summary>
 The offset of the head from the true beginning of the buffer.
 </summary>
</member><member name="P:UOLite2.SupportClasses.CircularBuffer`1.ToArray">
	<summary>
 Copies the entire buffer to an array and returns the array, does NOT move the head or tail position.
 </summary>
</member><member name="T:UOLite2.SupportClasses.CircularBuffer`1">
	<summary>A highly efficient FIFO buffer class.</summary>
	<typeparam name="T">The Type of objects you want to make a circular buff of.</typeparam>
</member><member name="T:UOLite2.Enums.Spell">
	<summary>Enumeration of Spells.</summary>
</member><member name="T:UOLite2.Enums.Macros">
	<summary>Enumeration of macro types.</summary>
</member><member name="T:UOLite2.Enums.Gender">
	<summary>Enumeration of mobile gender.</summary>
</member><member name="T:UOLite2.Enums.MobileStatus">
	<summary>Enumeration of mobile status.</summary>
</member><member name="T:UOLite2.Enums.Facets">
	<summary>Enumeration of the different facets.</summary>
</member><member name="M:UOLite2.LiteClient.GetDirection(System.UInt16@,System.UInt16@,System.UInt16@,System.UInt16@)">
	<summary>Returns the direction of Y, relative to X.</summary>
</member><member name="M:UOLite2.LiteClient.GetBytesFromString(System.Int32@,System.String@,System.Boolean@,System.Boolean@)">
	<summary>Returns the given string as a byte array, padded as specified.</summary>
	<param name="Length">The size of the array you want back.</param>
	<param name="Text">The text you want encoded in bytes.</param>
	<param name="Unicode">Whether or not you want unicode or not.</param>
	<param name="NullTerminate">Whether to add the null bytes to the end of the string.</param>
</member><member name="M:UOLite2.LiteClient.InsertBytes(System.Byte[]@,System.Byte[]@,System.Int32@,System.Int32@,System.Int32@)">
	<summary>Copies bytes from one array to another.</summary>
	<param name="SourceArray">Where to get the bytes.</param>
	<param name="TargetArray">Where to put the bytes.</param>
	<param name="SourceStartIndex">The position in the source array to start reading.</param>
	<param name="TargetStartIndex">The position in the target array to start writing.</param>
	<param name="Size">The number of bytes to copy.</param>
</member><member name="E:UOLite2.LiteClient.onPlayerMove">
	<summary>When the player's position is updated, this is called.</summary>
</member><member name="E:UOLite2.LiteClient.onMovementBlocked">
	<summary>
 Called when the player tries to walk and is prevented for whatever reason.
 </summary>
</member><member name="P:UOLite2.LiteClient.MovementPaused">
	<summary>
 Pauses player movement and prevents adding movements to the movement queue when set to false.
 </summary>
</member><member name="M:UOLite2.LiteClient.Follow(UOLite2.Serial@,System.Byte@,System.Byte@)">
	<summary>Follows the target.</summary>
	<param name="Target">The serial of the target to follow.</param>
</member><member name="P:UOLite2.SupportClasses.Skill.Lock">
	<summary>Gets or sets the skill's lock status.</summary>
</member><member name="P:UOLite2.SupportClasses.Skill.Value">
	<summary>
 The skill's value.
 </summary>
</member><member name="P:UOLite2.SupportClasses.Skill.BaseValue">
	<summary>
 What you see when you click "show real".
 </summary>
</member><member name="P:UOLite2.SupportClasses.Skill.Cap">
	<summary>
 The cap of the skill.
 </summary>
</member><member name="M:UOLite2.SupportClasses.Skill.Use">
	<summary>
 Attempt to use the skill, if the skill isn't a usable skill, nothing will happen.
 </summary>
</member><member name="P:UOLite2.SupportClasses.Gump.GumpObject.Page">
	<summary>
 The page number in the gump that this object belongs on.
 </summary>
</member><member name="P:UOLite2.SupportClasses.Gump.GumpObject.X">
	<summary>
 The X axis position, relative to the gump's 0,0
 </summary>
</member><member name="P:UOLite2.SupportClasses.Gump.GumpObject.Y">
	<summary>
 The Y axis position, relative to the gump's 0,0
 </summary>
</member><member name="M:UOLite2.LiteClient.StringList.#ctor(System.String)">
	<summary>
 Creates a new instance of the string list and populates it with the specified language.
 <example>Dim StrLst As New StringList("enu")
 MsgBox(StrLst.</example>
	</summary>
	<param name="language">Languages: enu,chs,cht,deu,esp,fra,jpn,kor</param>
</member><member name="T:UOLite2.LiteClient.StringList">
 Hide this class from the user, there is no reason from him/her to see it.

</member><member name="T:UOLite2.LiteClient.StringEntry">
 Hide this class from the user, there is no reason from him/her to see it.

</member><member name="P:UOLite2.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:UOLite2.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:UOLite2.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="P:UOLite2.Packets.Packet.Data">
	<summary>Returns the raw packet data as a byte array.</summary>
</member><member name="T:UOLite2.Packets.Packet">
	<summary>The base packet class, inherited by all classes in UOAI.Packets</summary>
</member><member name="P:UOLite2.Packets.UnicodeSpeechPacket.SpeechType">
	<summary>Gets or Sets the speech type as <see cref="T:UOLite2.Enums.SpeechTypes"/>.</summary>
</member><member name="P:UOLite2.Packets.UnicodeSpeechPacket.Hue">
	<summary>Gets or Sets the hue of the text.</summary>
</member><member name="P:UOLite2.Packets.UnicodeSpeechPacket.Font">
	<summary>Gets or Sets the font of the text.</summary>
</member><member name="P:UOLite2.Packets.UnicodeSpeechPacket.Language">
	<summary>Gets or Sets the language key of the packet. This only effects how it is interpreted, it does NOT change the actual language.</summary>
</member><member name="P:UOLite2.Packets.UnicodeSpeechPacket.Text">
	<summary>Gets or Sets the text that will be displayed. Will not allow a value longer than the current one.</summary>
</member><member name="T:UOLite2.Packets.UnicodeSpeechPacket">
	<summary>Clients send this packet when talking.</summary>
	<remarks>Packet 0xAD</remarks>
</member><member name="P:UOLite2.Packets.UnicodeText.Text">
	<summary>Gets or Sets the text that will be displayed. Will not allow a value longer than the current one.</summary>
</member><member name="P:UOLite2.Packets.UnicodeText.Name">
	<summary>Gets or Sets the name of the speaker. Maximum of 30 characters.</summary>
</member><member name="P:UOLite2.Packets.UnicodeText.Mode">
	<summary>Gets or Sets the speech type as <see cref="T:UOLite2.Enums.SpeechTypes"/>.</summary>
</member><member name="P:UOLite2.Packets.UnicodeText.Serial">
	<summary>Gets or sets the serial of the person or object speaking. 0xFFFFFFFF is used for system.</summary>
</member><member name="P:UOLite2.Packets.UnicodeText.Body">
	<summary>Gets or Sets the body value of the character that is talking. 0xFFFF is used for system.</summary>
</member><member name="P:UOLite2.Packets.UnicodeText.Hue">
	<summary>Gets or Sets the hue of the text.</summary>
</member><member name="P:UOLite2.Packets.UnicodeText.Font">
	<summary>Gets or Sets the font of the text.</summary>
</member><member name="P:UOLite2.Packets.UnicodeText.Language">
	<summary>Gets or Sets the language key of the packet. This only effects how it is interpreted, it does NOT change the actual language.</summary>
</member><member name="T:UOLite2.Packets.UnicodeText">
	<summary>This is sent from the server to tell the client that someone is talking.</summary>
	<remarks>Packet 0xAE</remarks>
</member><member name="P:UOLite2.Packets.OpenContainer.Serial">
	<summary>
 The serial of the container being opened.
 </summary>
</member><member name="P:UOLite2.Packets.OpenContainer.Model">
	<summary>
 The model of the container being opened.
 </summary>
</member><member name="T:UOLite2.Packets.OpenContainer">
	<summary>
 This is sent by the server to open a container or game board (which is also a container). It is only for the art to pop up on the screen, and actualy serves no purpose here.
 </summary>
	<remarks>Packet 0x24</remarks>
</member><member name="P:UOLite2.Packets.ObjectToObject.Serial">
	<summary>
 The serial of the item to add.
 </summary>
</member><member name="P:UOLite2.Packets.ObjectToObject.ItemType">
	<summary>
 The artwork number of the item.
 </summary>
</member><member name="T:UOLite2.Packets.ObjectToObject">
	<summary>
 This is sent by the server to add a single item to a container. (not to display its contents)
 </summary>
	<remarks>Packet 0x25</remarks>
</member><member name="T:UOLite2.Packets.GetItemFailed">
	<summary>
 This is sent to deny the player's request to get an item.
 </summary>
	<remarks></remarks>
</member><member name="P:UOLite2.Packets.EquipItem.Serial">
	<summary>
 The serial of the item to equip.
 </summary>
</member><member name="P:UOLite2.Packets.EquipItem.ItemType">
	<summary>
 The item's artwork number.
 </summary>
</member><member name="P:UOLite2.Packets.EquipItem.Layer">
	<summary>
 The item's layer
 </summary>
</member><member name="P:UOLite2.Packets.EquipItem.Container">
	<summary>
 The serial of the character on which the item will be equipped.
 </summary>
</member><member name="P:UOLite2.Packets.EquipItem.Hue">
	<summary>
 The item's hue.
 </summary>
</member><member name="T:UOLite2.Packets.EquipItem">
	<summary>
 This is sent by the server to equip a single item on a character.
 </summary>
	<remarks></remarks>
</member><member name="T:UOLite2.Packets.ContainerContents">
	<summary>
 This is sent to display the contents of a container.
 </summary>
	<remarks></remarks>
</member><member name="T:UOLite2.Packets.RenameMOB">
	<summary>
 Sent by the client to rename another mobile.
 </summary>
</member><member name="T:UOLite2.Packets.MobileStats">
	<summary>
 Yo programmer, I'm really happy for you and I'm gona let you finish 
 but this is one of the biggest packet classes of all time, OF ALL TIME!
  -Kanye West
 757 lines...
 </summary>
</member><member name="T:UOLite2.Packets.HPHealth">
	<summary>
 This is sent by the server to tell the client to update a Mobile's health and max health.
 </summary>
</member><member name="T:UOLite2.SupportClasses.BufferHandler">
 Hide this class from the user, there is no reason from him/her to see it.

</member><member name="F:UOLite2.Enums.GetItemFailedReason.CannotPickup">
	<summary>Displays "You cannot pick that up."</summary>
</member><member name="F:UOLite2.Enums.GetItemFailedReason.TooFar">
	<summary>Displays "That is too far away."</summary>
</member><member name="F:UOLite2.Enums.GetItemFailedReason.OutOfSight">
	<summary>Displays "That is out of sight."</summary>
</member><member name="F:UOLite2.Enums.GetItemFailedReason.DoesntBelongToYou">
	<summary>Displays "That item does not belong to you. You will have to steal it."</summary>
</member><member name="F:UOLite2.Enums.GetItemFailedReason.AlreadyHoldingItem">
	<summary>Displays "You are already holding an item."</summary>
</member><member name="F:UOLite2.Enums.GetItemFailedReason.Cmd_DestroyTheItem">
	<summary>Tells the client to delete the item from its cache.</summary>
</member><member name="F:UOLite2.Enums.GetItemFailedReason.NoMessage">
	<summary>Displays no message, just doesn't let you pick it up.</summary>
</member><member name="T:UOLite2.Enums.GetItemFailedReason">
	<summary>
 Reason enumeration for "Get Item Failed" packet. (0x27)
 </summary>
</member><member name="T:UOLite2.Enums.PacketType">
	<summary>
 Packet type enumeration.
 </summary>
	<remarks></remarks>
</member><member name="M:UOLite2.Item.#ctor">
	<summary>
 When using this new, never ever ever try to access the contents!
 </summary>
	<remarks></remarks>
</member><member name="P:UOLite2.Item.Serial">
	<summary>The serial of the item.</summary>
</member><member name="P:UOLite2.Item.Type">
	<summary>The artwork number of that item. This is what determines what it looks like in game.</summary>
</member><member name="P:UOLite2.Item.StackID">
	<summary>The number to add the the artwork number to get the artwork number of the item if it is a stack. 
 Usualy this is 0x01.</summary>
</member><member name="P:UOLite2.Item.Amount">
	<summary>The number of objects in a stack.</summary>
</member><member name="P:UOLite2.Item.X">
	<summary>The location of the item on the X axis. If the item is inside of a container, 
 this represents the number of pixels within the container from the left side at which 
 the item will be placed.</summary>
</member><member name="P:UOLite2.Item.Y">
	<summary>The location of the item on the Y axis. If the item is inside of a container, 
 this represents the number of pixels from the top of the container that the item will 
 be placed</summary>
</member><member name="P:UOLite2.Item.Z">
	<summary>The location of the item on the Z axis.  If the item is inside of a container this
 specifies the "height" of it, like if its on top of other objects.</summary>
</member><member name="P:UOLite2.Item.Container">
	<summary>The serial of the container of the item.</summary>
</member><member name="P:UOLite2.Item.Hue">
	<summary>The item's hue.</summary>
</member><member name="P:UOLite2.Item.TypeName">
	<summary>
 Returns a string containing the ASCII name of the item artwork name. Returns "Blank" if no typename can be found.
 </summary>
</member><member name="P:UOLite2.Item.Tag">
	<summary>
 A user defined string for making notes on items and mobiles.
 </summary>
</member><member name="M:UOLite2.Item.Take(System.UInt16)">
	<summary>
 Picks up the object.
 </summary>
	<param name="Amount">The amount that you want to take, if it is a stack. (0 for the whole stack)</param>
</member><member name="M:UOLite2.Item.Drop">
	<summary>
 Drops the item as the feet of the player.
 </summary>
</member><member name="M:UOLite2.LiteClient.DropItem(System.UInt16@,System.UInt16@,System.Byte@)">
	<summary>
 Drops the item on the ground at the specified point.
 </summary>
</member><member name="M:UOLite2.LiteClient.DropItem(UOLite2.Serial@)">
	<summary>
 Drops the item into the specified container.
 </summary>
</member><member name="M:UOLite2.LiteClient.DropItem">
	<summary>
 Drops the item in the players hand into the player's backpack.
 </summary>
</member><member name="P:UOLite2.ItemDatabase.Items">
	<summary>
 Returns an array of all of the items the client is currently tracking.
 </summary>
</member><member name="M:UOLite2.ItemDatabase.ContentsList.#ctor(UOLite2.ItemDatabase@,UOLite2.Serial@)">
	<param name="Database">The Database that contains the items in this list.</param>
	<param name="Owner">The item this list belongs to.</param>
</member><member name="P:UOLite2.ItemDatabase.ContentsList.Items">
	<summary>
 Returns a hashset of the items contains in this list.
 </summary>
</member><member name="P:UOLite2.ItemDatabase.ContentsList.Serials">
	<summary>Returns a hashset of the serials of the items contained in this list.</summary>
</member><member name="M:UOLite2.ItemDatabase.ContentsList.byTypeTotal(System.Boolean@)">
	<summary>
 Returns the total of all stacks of the item type specified.
 </summary>
	<param name="Recursive">Whether or not to search subcontainers.</param>
</member><member name="M:UOLite2.ItemDatabase.Contains2(UOLite2.Item)">
	<summary>
 NOT USED!
 </summary>
</member><member name="M:UOLite2.ItemDatabase.Add1(UOLite2.Item)">
	<summary>
 NOT USED!!!
 </summary>
</member><member name="M:UOLite2.ItemDatabase.CopyTo(UOLite2.Item[],System.Int32)">
	<summary>
 NOT USED!!!
 </summary>
</member><member name="P:UOLite2.ItemDatabase.IsReadOnly">
	<summary>
 NOT USED!!!
 </summary>
</member><member name="M:UOLite2.ItemDatabase.Remove0(UOLite2.Item)">
	<summary>
 NOT USED!!!
 </summary>
</member><member name="E:UOLite2.LiteClient.onPacketReceive">
	<summary>
 Called when a Packet arrives on this client.
 </summary>
	<param name="Client">Client on which the packet was received</param>
	<param name="bytes">The received packet</param>
</member><member name="M:UOLite2.LiteClient.PacketHandling(UOLite2.Packets.Packet@)">
	<summary>Handles a packet however it needs to be handled.</summary>
	<param name="currentpacket">The packet to process.</param>
</member><member name="M:UOLite2.LiteClient.GetServerList(System.String,System.String,System.String,System.UInt16)">
	<summary>Connects to the specified login server and populates the ServerList property.</summary>
	<param name="Address">The address of the login server to connect to.</param>
	<param name="Port">The port to connect to (default is 2593).</param>
	<param name="Username">The username to connect with.</param>
	<param name="Password">The cooresponding password for the supplied username.</param>
</member>
</members>
</doc>